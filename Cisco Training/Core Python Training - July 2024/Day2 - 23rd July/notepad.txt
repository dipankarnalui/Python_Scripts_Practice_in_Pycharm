str-class:-
===========
>> Im-Mutable strings
>> default char set - unicode - utf-8
>> inter-nationalization & localization is easy
>> uni-code can represent any manuscript in the world
   ex: kananda,hindi,tamil,korean,japanese, English

>> city="bengaluru"        # double quoted - one line string
   city='bengaluru'        # single quoted - one line string
   city='''bengaluru'''    # triple quoted - multi line string
   city=r'bengaluru'       # raw strings - WYSIWG
   city=R'bengaluru'       # raw strings - WYSIWG


Note:
>> within \n - new line
          \t - tab
          \b - backspace
>> for ASCII char set we have to use bytes string
>> raw strings used while representing windows file paths
                          regular expressions


1) define a string    :  city="bengaluru"
2) string length      :  n=len(city)
3) Indexing           :  first element = city[0]
                         last element  = city[-1]
4) Slicing            :  city[start:stop:step] # stop is exclusive
                         First 4        = city[:4]
                         Except first 4 = city[4:]
                         Last 4         = city[-4:]
                         Except last 4  = city[:-4]
                         Alternate      = city[::2]/city[1::2]
                         Reverse        = city[::-1]

5) search             : if "substr" in city
                        res = city.index("substr")
                        res = city.count("substr")
6) split              : flst = city.split("DELIMITER")
7) join               : res = "DELIMITER".join(STRLIST)


Note:
  python supports negative indexes


Slicing examples:-
===================
a = "bengaluru"

bengal     - city[0:6:1]    -   city[:6]
nga        - city[2:4:1]    -   city[2:4]
ben        - city[0:3:1]    -   city[:3]
aluru      - city[5:9:1]    -   city[5:]
ulag       - city[6: 2:-1]  -
eng        - city[1:4:1]    -   city[1:4]
bengaluru  - city[0:9:1]    -   city[::]/city[:]
bnauu      - city[0:9:2]    -   city[::2]
eglr       - city[1:9:2]    -   city[1::2]





Demo for slicing:-
===================
Given:-
--------
name = "manoj"

Expected:-
----------
res1 = "Manoj"  # convert first letter to upper case
res2 = "manoJ"  # convert last letter to upper case
res3 = "ManoJ"  # convert first & last letter to uppercase



solution:-
===========
name = input("Enter u r string : ")

res1 = name[0].upper() + name[1:]
res2 = name[:-1] + name[-1].upper()
res3 = name[0].upper() + name[1:-1] +  name[-1].upper()

print(res1)
print(res2)
print(res3)


Task:-
=======
Given:-
--------
name = "arvindhan"

Expected:-
----------
res1 = "ARvindhAN"   # first 2 & last 2 letters to uppercase
res2 = "ARVI-ndhan"  # first 4 to upper & concate a hyphen
res3 = "ARVI-NAHDN"  # first 4 & reverse - remaining

Duration : 10 mins
Time     : 3.09 to 3:19




Solution:-
===========
name = "arvindhan"
res1 = name[:2].upper() + name[2:-2] + name[-2:].upper()
res2 = name[:4].upper() + "-" + name[4:]
res3 = name[:4].upper() + "-" + name[4:].upper()[::-1]

print(res1)
print(res2)
print(res3)




Demo search for substr:-
=========================
>> Special operator "in" - membership operator

>> if "substr" in city  - check if substr exists/does't exists
                        - if exists returns True
                        - if does't exists returns False

>> res = city.index("substr") / city.rindex("substr")
       - returns the index position on SUCCESS
       - raises an EXCEPTION on FAILURE
       - index of the first occurance

>> res = city.count("substr")
       - return no of occurances of substr


Ex1:-
------
sent = "today is a working day monday"

res = "day" in sent   # search for the word "day" in sent
print(res)


Ex2:-
------ #          1         2
       #01234567890123456789012345678
sent = "today is a working day monday"
res = sent.index("day")
print(res)

res = sent.rindex("day")
print(res)   #

Ex3:-
-----
sent = "today is a working day monday"
res = sent.count("day")
print(res)






Demo split:-
============
>> usually single lettered special char - delimiter
>> UNIVERSAL DELIMITER                  - WHITE SPACE
>> usually will be UNIFORM (ideal case)


Ex1:-
-----
dob = "15-aug-1947"

flst = dob.split("-")  # SPLIT returns a LIST

# split first argument is a DELIMITER
# split returns a LIST

                  # flst[0]  flst[1] flst[2]
print(flst)       # ["15" ,  "aug",  "1947"]

print(flst[-1])   # 1947
print(flst[0])    # 15
print(flst[1])    # aug

print(flst[2][-1])  #  7
print(flst[-2][0])  #  a
print(flst[0][0])   #  1
print(flst[-1][-1]) #  7
print(flst[1][:2])  #  au
print(flst[2][-2:]) #  47
print(flst[-1][:2]) #  19
print(flst[1][1:-1]) # u

Demo join:-
===========
>> translates a STRING VECTOR into a SCALAR STRING
>> join works only with string vectors

alst = ["north","south","east","west"]
res = "-".join(alst)
print(res)   #"north-south-east-west"




Task:-
------
data = "arun-blr-math,10,sci,20,soc,30"

Expected:-
----------
Total marks = 60

Duration : 10 mins
Time     : 4.12 to 4.22

data = "arun-blr-math,10,sci,20,soc,30"

flst = data.split(",")
print(flst) # ["arun-blr-math","10","sci","20","soc","30"]
math = int(flst[1])
sci  = int(flst[3])
soc  = int(flst[5])
total = math + sci + soc
print(total)

total = 0
for elem in flst:
    if elem.isdigit():
       total = total + int(elem)

print(total)



solution:-
----------
data = "arun-blr-math,10,sci,20,soc,30"

flst = data.split("-")

           #   flst[0] flst[1]   flst[2]
print(flst)#  ["arun", "blr", "math,10,sci,20,soc,30"]

marks = flst[2].split(",")[1::2]

print(marks)   # ["10","20","30"]

print(sum(marks)) # error - since it contents are string

marks[0] = int(marks[0])
marks[1] = int(marks[1])
marks[2] = int(marks[2])

print(marks)       # [10,20,30]
print(sum(marks))  #



Tricks :-
---------
OUTPUTARRAY=list(map(int,INPUTARRAY))
OR
OUTPUTARRAY=[int(e) for e in INPUTARRAY]


solution:-
-----------
data = "arun-blr-math,10,sci,20,soc,30"

                        #  0       1     2
flst = data.split("-")  #["arun","blr","math,10,sci,20,soc,30"]

                           #   0     1    2     3    4     5
marks = flst[2].split(",") #["math","10","sci","20","soc","30"]

final = list(map(int,marks[1::2]))

print(final)

print(sum(final))


solution:-
==========
final = list(map(int,data.split("-")[-1].split(",")[1::2]))
print(sum(final))


Task:-
======

data = "north-sales-10-20-30-40-50-blr-chn"

total sales = 150


Duration : 10 mins
Time     : 4.40 to 4.50

Tricks :-
---------
OUTPUTARRAY=list(map(int,INPUTARRAY))
OR
OUTPUTARRAY=[int(e) for e in INPUTARRAY]




solution:-
-----------
data = "north-sales-10-20-30-40-50-blr-chn"

flst = data.split("-")

marks = flst[2:-2]

print(sum(map(int,marks)))
#or
print(sum([int(e) for e in marks]))




Task:-
=======
Given:-
--------
numlst = [10,20,30,40,50]  # vector

Expected:-
-----------
res = "10-20-30-40-50"    # scalar


once completed paste the solution to the chat...

nagendra - perfect
monika   - perfect
jagdish  - perfect
shantanu - perfect
rajalakshmi-perfect
shruti     -perfect
ravi       -perfect
bhupesh    -perfect
nilesh     -perfect
tarang     -perfect



solution:-
-----------
numlst = [10,20,30,40,50]  # vector

newlst = list(map(str,numlst)) # convert int vector to str vector

res = "-".join(numlst)

print(res)



key take away string-class:-
============================
>> index, slicing
>> search for a substr
>> split
>> join
>> OUTPUT=list(map(int,INPUTARRAY))
>> OUTPUT=[int(e) for e in INPUTARRAY]

============================================================
if-else:- (Branching statements)
=================================
>> instead of flower braces we used INDENTED BLOCKS
>> elseif - in python is "elif"
>> cond1 and cond2  - "and" is a keyword of python
>> cond1 or cond2   - "or"  is a keyword of python
>> special built-in fn - all([cond1,cond2,cond3])
>> special built-in fn - any([cond1,cond2,cond3])


Demo1:-
-------
age = int(input("Enter your age: "))

if  age >= 18 :
     print("Eligible to vote")
else:
     print("Not Eligible to vote")



Demo:-
------
value = int(input("Enter a value : "))

if value>=10 and value<=20:
    print("GRP-1")

elif value>20 and value<=30:
    print("GRP-2")

else:
    print("GRP-3")


Demo:-
------
sent = "learning python is easy"

word = input("Enter a word : ").lower()

if word in sent:
   print("given word is part of sentence")
else:
   print("given word not a part of sent")



Task :-
=======
WORLD LIMIT

prompt the user to enter a sentence from the keyboard

a sentence can have  min words = 2
                     max words = 8

if no of words within the limit   - WITHIN THE LIMIT
if it exceeds limit               - OUT OF LIMIT


Given:-
-------
Enter a sent : hello world of unix

Expected:-
----------
your string has 4 words - within limit


Given:-
-------
Enter a sent : sample text was added using text editor on os

Expected:-
----------
your sent has  10 words - out of limit


Duration : 10 mins
Time     : 9.34 to 9.44


shruti   - perfect
monika   - perfect
bhupesh  - perfect
nilesh   - perfect - map not needed
nagendra - perfect
shantanu - perfect
tarang   - perfect len()
dipankar - perfect
jagdish  - perfect
ravi     - perfect


solution:-
===========
sent = input("Enter a sentence : ")
words = sent.split()
no_of_words = len(words)

print("u r string has %s words" %(no_of_words))

if no_of_words>=2 and no_of_words<=8:
   print("Within the LIMIT")
else:
   print("OUT OF THE LIMIT")



Task:-
------
Given:-
-------
data1="ravi-math=60,sci=20,soc=30"
data2="hari-math=15,sci=30,soc=45"

Expected:-
----------
compare total marks of ravi & hari
display message
   hari has scored better than ravi
   or
   ravi has scored better than hari


Duration : 10 mins
Time     : 9.53 to 10.05


nagendra - perfect
shruti   - perfect
dipankar - perfect
rajalakshmi-perfect
jagdish  - perfect
shantanu - perfect


Solution:-
----------
data1="ravi-math=10,sci=20,soc=30"
data2="hari-math=15,sci=30,soc=45"

marks1=data1.replace("=",",").replace("-",",").split(",")[2::2]
marks2=data2.replace("=",",").replace("-",",").split(",")[2::2]

total1 = sum(map(int,marks1))
total2 = sum(map(int,marks2))

if total1 > total2:
   print("ravi has scored better than hari")
else:
   print("hari has scored better than ravi")


-----------------------------------------------------------------------------

Iterator Protocol:-
====================
>> protocol - visit every element in the collection
>> to traverse on the collection
>> collection       - Iterable
   cursor           - Iterator
   where to start   - First element of the collection
   when to stop     - since dynamic collection - StopIteration
   how to move      - forward


for-iterator:-
==============
>> foreach loop
>> "namelst" is a collection/iterable
>> "name" is a cursor/iterator

Ex1:-
-----
#forward iterator
namelst = ["adit","bala","devi","anush","hitesh"]

for name in namelst:
     print("Hello",name)

name     print("Hello",name)

adit     print("Hello",adit)
bala     print("Hello",bala)
devi     print("Hello",devi)
anush    print("Hello",anush)
hitesh   print("Hello",hitesh)


Ex2:-
-----
#reverse iterator
namelst = ["adit","bala","devi","anush","hitesh"]

for name in reversed(namelst):
     print("Hello",name)


Ex3:-
-----
#Index based iterator (writeback on mutable list)
namelst = ["adit","bala","devi","anush","hitesh"]

for index in range(0,len(namelst),1):
     print("Hello",namelst[index])


Ex4:-
------
#parallel iterator (truncate to the smallest list)
namelst = ["adit","bala","devi","haunsh","hitesh"]
deptlst = ["sales","purch","accts","finan","oper"]

for name,dept in zip(namelst,deptlst):
   print(name,dept)




Guess:-
-------
# Mutable List

alst = [10,20,30,40,50]

for elem in alst:
    elem = elem + 1

print(alst)  # what will be output of this print statement ?

A) [10,20,30,40,50]
B) [11,21,31,41,51]
C) [1,1,1,1,1]
D) [9,19,29,39,49]


A - bhupesh, nagendra,nilesh,ravi,shaikh,rajalakshmi,
B - jagdish,dipankar,monika,
C -
D -




Demo:-
-------
# Mutable List

#       0  1  2  3  4
alst = [10,20,30,40,50]

             #[0,1,2,3,4]
for index in range(0,len(alst),1):
    alst[index] = alst[index] + 1


print(alst)


index    alst[index]     alst[index] = alst[index] + 1
0        alst[0]         alst[0] = 10 + 1  alst=[11,20,30,40,50]
1        alst[1]         alst[1] = 20 + 1  alst=[11,21,30,40,50]
2        alst[2]         alst[2] = 30 + 1  alst=[11,21,31,40,50]
3        alst[3]         alst[3] = 40 + 1  alst=[11,21,31,41,50]
4        alst[4]         alst[4] = 50 + 1  alst=[11,21,31,41,51]



A) [10,20,30,40,50]
B) [11,21,31,41,51]
C) [1,1,1,1,1]
D) [9,19,29,39,49]



Task:-
=======
Given:-
=======
alst = [
        "ravi-blr",
        "hari-chn",
        "manu-mum",
        "guru-del"
       ]

Expected:-
-----------
ravi B
hari C
manu M
guru D

print(alst)  # still the data should be intact

Duration : 10 mins
Time     : 11.20 to 11.30

Note: use the appor iterator - forward/reverse/index/parallel


bhupesh  - perfect - split - rather than using slicing
shruti   - perfect
nagendra - perfect
jagdish  - perfect - split - rather than using slicing
dipankar - perfect - use forward iterator
nilesh   - perfect - use forward iterator
monika   - perfect
rajalakshmi-perfect
shantanu - perfect - use forward iterator
tarang   - perfect

ravi     -
shaikh   -


forward - for elem in collection
reverse - for elem in reversed(collection):
index   - for index in range(len(collection)):
parallel- for v1,v2 in zip(collect1,collect2):


solution:-
-----------
alst = [
        "ravi-blr",
        "hari-chn",
        "manu-mum",
        "guru-del"
       ]

for record in alst:
    flst = record.split("-")
    print(flst[0], flst[1][0].upper())


record           flst             flst[0]        flst[1][0]
                  [0]    [1]
"ravi-blr"      ["ravi","blr"]    ravi           b
"hari-chn"      ["hari","chn"]    hari           c
"manu-mum"      ["manu","mum"]    manu           m
"guru-del"      ["guru","del"]    guru           d



Task:-
=======
Given:-
-------
numlst = [1, 2, 3, 4, 5]

Expected output:-
-----------------
print(numlst)  # [1 , 4, 9, 16, 25]

Duration : 10 mins
Time     : 11.43 to 11.53


shruti  - perfect
nilesh  - perfect
nagendra- perfect
bhupesh - perfect
jagdish - perfect
shantanu- perfect
dipankar- perfect
rajalakshmi-perfect
tarang  - perfect
monika  - perfect
ravi    - perfect
shaikh  -


solution:-
----------
numlst = [1,2,3,4,5]

for index in range(len(numlst)):
   numlst[index] = numlst[index] ** 2

print(numlst)



key take away :-
=================
>>if-else branching
>>Iterator protocol & jargons
>>forward iterator
>>reverse     - special fn reversed()
>>index based - special fn range()
>>parallel    - special fn zip()

Note:
   Indentation is very strict

====================================================================
Tuple-class:-
=============
>> Im-mutable collection/vector - Write protected collection
>> constant collection
>> we cannot write back or add or delete elements
>> faster than LIST
>> tuple can be member of a set
>> tuple can be used as a dict key

1) define a tuple  : weeks=("sun","mon","tue","wed","thu")
                     weeks="sun","mon","tue","wed","thu"
2) length          : res = len(weeks)
3) indexing        : same as strings
4) slicing         : same as strings
5) search          : same as strings
6) merge 2         : c=a+b
7) compare 2       : if a==b

Demo1:-
--------
day1 = ("dvd", "hdd", "mon")
day2 = ("prn", "usb", "cpu", "mob")

final = day1 + day2

print(final) #("dvd", "hdd", "mon","prn", "usb", "cpu", "mob")


Demo2:-
--------
a=(10,20,30)
b=(10,20,30)

print(a==b)   #  True

c=(40,50,60)
print(a==c)   #  False




Tuple unpacking :-
------------------
 a=10
 b=20
 c=30


 Place all the variable to left hand side
 Place all the values to right hand side

 a,b,c = 10,20,30

 Equal no of variables & Equal no of values


1) a,b,c = 10,20,30    # equal distribution

2) a,b,c = 10,20,30,40 # unpack Error - since num of vars
                         num of values doesn't match

3) a,b = 10,20
   print("A = ",a)
   print("B = ",b)
   a,b = b,a         # swapping
   print("A = ",a)
   print("B = ",b)


4) *a,b,c = 10,20,30,40,50,60  #
   a,*b,c = 10,20,30,40,50,60  #
   a,b,*c = 10,20,30,40,50,60  #
   *a,b,c = 10,20,30           #
   *a,b,c = 10,20              #
   *a,b,c = 10                 # Error
   *a,*b,c = 10,20,30          # Error

>> star prefixed variable can store zero/more values - list
>> star-prefixed variable is called as "MOTHER"
>> MOTHER always prirortizes the children
>> non-star prefixed var can store only one value
>> non-star prefixed variable is called as "CHILD"
>> statement cannot have multiple start prefixed variable



Demo for unpacking:-
===================
dob = "15-aug-1947"

flst = dob.split("-")

print("day  ",flst[0])
print("month",flst[1])
print("year ",flst[2])

OR
                                  # list unpacking
day,month,year = dob.split("-")   # prefered-way
print("day  ",day)
print("month",month)
print("year ",year)



Demo for unpacking:-
===================
data = "hari-cse-10-20-30-40-blr"

name,dept,*marks,loc = data.split("-")

print(name)  # hari
print(dept)  # cse
print(marks) # ["10","20","30","40"]
print(loc)   # blr




Demo on tuple slicing:-
=======================
      # 0  1  2  3  4  5
data = (10,20,30,40,50,60)

index = data.index(30)  # first occurance of 30

before30 = data[0:index]     # data[0:2] --> (10,20)
after30  = data[index+1:]    # data[3:]  --> (40,50,60)
res = before30+after30       # (10,20) + (40,50,60)
print(res)



Applications:-
===============
>> Auto Encode & Decode - month in words
                        - weekday in words
                        - other labels
>> month in digits converted to month in words
>> store constant strings / write-protected data


======================================================================
List-class:-
============
>> Mutable collection/vector - add/delete/overwrite/modify
>> Index & Slicing
>> Inplace operations
>> shallow copy & deep copy
>> custom sort - lambda expression


1) define a empty list   : alst=[]
2) define list with vals : alst=[1,2,3,4,5]
3) length                : res = len(alst)
4) indexing              : same as strings
5) slicing               : same as strings
6) search                : same as strings
7) add an elem at end    : alst.append(ITEM)  #memory alloc & adds
8) del based on index    : alst.pop(INDEX)
9) del based on value    : alst.remove(VALUE) # first occurance
10)del slice             : del alst[0:3]
11)sort in asc order     : alst.sort()   # Same types
12)sort in desc order    : alst.sort(reverse=True)
13)reverse               : alst.reverse()
14)list multiplier       : alst=[1,2,3] * 2 (duplicates)

see later:-
-----------
alst.extend(ITERABLE)
alst.insert(position,NEWVALUE)
clst = alst + blst
if alst==blst
sum(alst)
max(alst)
min(alst)

Demo:-
=======
numlst = [10,20,30,40]

print(numlst)

numlst.append(50)

print(numlst)    #[10,20,30,40,50]

numlst.pop(0)

print(numlst)   # [20,30,40,50]

numlst.remove(40)

print(numlst)   # [20,30,50]



Demo:-
=======

numlst = [30,10,50,40,20]

numlst.sort()

print(numlst)   # [10,20,30,40,50]

numlst.reverse()

print(numlst)   # [50,40,30,20,10]



Demo for collect  data in a new list :-
---------------------------------------
# collect all the city names from the LIST
# and store the city names in a NEW LIST

alst = [
        "ravi-blr",
        "hari-chn",
        "manu-mum",
        "guru-del"
       ]

# define a empty list to collect the CITY NAMES
newlst = []

# traverse on the list
for record in alst:
    # split the data based on the delimiter
    name,city = record.split("-")

    # append the city name to the EMPTY LIST
    newlst.append(city)

# outside the for - print it
print(newlst)  #["blr","chn","mum","del"]



Demo for filter the data :-
---------------------------
# filter the emp's working in "blr"

alst = [
        "ravi-blr",
        "hari-chn",
        "manu-mum",
        "guru-BLR",
        "ramu-Blr",
        "guru-del",
        "manu-blr"
       ]

# traverse the list
for elem in alst:
    # split the element
    name,city = elem.split("-")

    # check the condition
    if city.lower() == "blr":
        print(name)



Task:-
======
alst = [
        "blr----dvd------50",
        "chn-------mon--30",
        "del----prn-25",
        "blr---keb---------60",
        "mum-usb-----65",
        "del---hdd-20"
       ]
OR
alst = [
        "blr-dvd-50",
        "chn-mon-30",
        "del-prn-25",
        "blr-keb-60",
        "mum-usb-65",
        "del-hdd-20"
       ]


Expected:-
----------
prodname = [dvd,mon,prn,keb,usb,hdd]
above50  = [dvd,keb,usb]

Duration : 10 mins
Time     : 12.39 to 12.49


dipankar - perfect / awesome one liner
nagendra - perfect
nilesh   - perfect
jagdish  - perfect
monika   - perfect
shruti   - perfect
shaikh   - perfect
tarang   - perfect
shantanu - perfect
rajalakshmi - perfect
ravi     -
bhupesh  -



solution:-
==========
alst = [
        "blr----dvd------50",
        "chn-------mon--30",
        "del----prn-25",
        "blr---keb---------60",
        "mum-usb-----65",
        "del---hdd-20"
       ]

namelst = []
above50 = []
for elem in alst:
    city,name,qty = elem.replace("-"," ").split()
    namelst.append(name)
    if int(qty)>=50:
        above50.append(name)

print(namelst)
print(above50)




Task:-
======
studlst = [
           "ravi-40,30,10,60",
           "manu-54,37,87,50",
           "guru-76,80,66,40",
           "hari-58,45,95,45"
          ]

Expected:-
----------
ravi total is 140
manu total is 228
guru total is 262
hari total is 243

Duration : 10 mins
Time     : 2.13 to 2.23

>> single split
>> tuple unpacking
>> list comp or  map

monika     - perfect unpacking/map/split
shruti     - awesome one liner
rajalaksmi - perfect unpacking/map/split
nagendra   - perfect unpacking/comp/split
bhupesh    - perfect unpacking/map/split
shantanu   - perfect unpacking/map/split
jagdish    - perfect unpacking/map/split
nilesh     - perfect
tarang     - perfect
dipankar   - perfect
ravi   -
shaikh -



solution:-
------------
studlst = [
           "ravi-40,30,10,60",
           "manu-54,37,87,50",
           "guru-76,80,66,40",
           "hari-58,45,95,45"
          ]

for elem in studlst:
   #name,*marks = "ravi,40,30,10,50".split(",")
   #name,*marks =  ["ravi", "40", "30, "10, "50"]
   name,*marks = elem.replace("-",",").split(",")
   #name = "ravi"
   #marks = ["40", "30, "10, "50"]
   marks = [int(e) for e in marks]
   print(name,sum(marks))



Demo:-
======
# problem statement :
# from the given list -
# delete all the occurances of a particular number

alst = [10,40,30,10,20,10,50,10,10,20,40,10]

# assume we have to remove all the occurances of 10

# find the no of occurances
cnt = alst.count(10)

# loop for 6 times i.e count no of times
for _ in range(cnt):
    alst.remove(10)

print(alst)





Demo:-
======
>> filter the numeric data

Given:-
-------
numlst = ["10","50","blr","30","hari","arun","40","derrick","20"]

Expected:-
----------
res = [10,20,30,40,50]


Solution:-
----------
numlst = ["10","50","blr","30","hari","arun","40","derrick","20"]

res = []
for elem in numlst:
    if elem.isdigit():
       res.append(int(elem)) # convert & store

print(res)
res.sort()
print(res)


Trick:-
-------
#       3          1             2
#res=[int(e) for e in numlst if e.isdigit()]


---------------------------------------------------------------
Shallow copy:-
==============

Guess:-
-------
alst = [10,20,30,40,50,60]
blst = alst
alst[0] = 0
alst[1] = 0
alst[2] = 0
print(blst) # what will be output of this print statement ?

A) [10,20,30,40,50,60]
B) [40,50,60]
C) [10,20,30]
D) [0,0,0,40,50,60]

A)jagdish,bhupesh,monika, ravi,shaikh,shruti,
B)
C)
D)dipankar,nagendra,nilesh,rajalakshmi,shantanu,tarang





alst = blst         # shallow copy ( SHARING )

import copy
alst = copy.deepcopy(blst) # deep copy
                    # suitable nested data structure
Guess:-
-------
import copy

alst = [10,20,30,40,50,60]

blst = copy.deepcopy(alst)

alst[0] = 0
alst[1] = 0
alst[2] = 0

print(blst) # what will be output of this print statement ?





Inplace & Outplace:-
====================
>> Im-Mutable if we modify DUPLICATE COPY - OUTPLACE
>> Mutable    if we modify ORIGINAL COPY  - INPLACE


Ex1:-
-----
# mutable list
alst = [40,10,30,20,50]

# create duplicate the LIST & stored in "blst"
blst = alst.copy()    #  blst=alst[:]
blst.sort()           #

print(alst)  # [40,10,30,20,50]
print(blst)  # [10,20,30,40,50]


Ex2:-
-----
# mutable list
alst = [40,10,30,20,50]

blst = sorted(alst)   # sorted is a inbuilt fn

print(alst)  # [40,10,30,20,50]
print(blst)  # [10,20,30,40,50]


Ex3:-
======
# mutable list
alst = [40,10,30,20,50]

alst.sort()

print(alst)  # [10,20,30,40,50]


Note:
  -list.sort() is a void returning member function
  -never take the return values of list.sort()
  -such sorts are called as "INPLACE SORT"

Note:
  -blst = sorted(alst)
  -sorted is a inbuilt function
  -such sorts are called as "OUTPLACE SORT"




Example for Math-Expression:-
=============================
# on the paper
f(x) = x + 5

"f" is the function name
"x" is the argument name
"x+5"  is the statement which returns


# convert the on the paper expression to a PYTHON FUNCTION
def f(x):
   return x+5

# verify
print(f(5))  # 10
print(f(20)) # 25
print(f(40)) # 45


Lambda Expressions:-
====================
>> any function which has only one statement & Returns
   such fns can be replace with "lambda expression"

>> Anon/Un-named Functions

>> functioname = lambda ARGUMENT : STATEMENT
   (lambda is a python keyword)

>> f = lambda x : x + 5

>> test the above lambda expression
   print(f(5))
   print(f(20))


Rule:
  -lambda fns should be one-liner
  -should return a value


Demo:-
-------
def adder(num1,num2):
   return num+num2

OR

adder = lambda x,y : x+y

print(adder(5,30))  # ?
print(adder(2,4))   #


Demo:-
======

def convert(name):
    return name.split()[0]

OR

convert = lambda x : x.split()[0]

print(convert("hari prasad"))
print(convert("john peter"))




Task:-
------
Function-call     -  OUTPUT
============================
f1("ravi kumar")  -  kumar
f2("ravi kumar")  -  RK
f3("ravi kumar")  -  Ravi Kumar
f4([40,50,10,20]) -  [10,20,40,50]

f5("ravi-blr-10,20,30")  - "10,20,30"
f6("ravi-blr-10,20,30")  - ["10","20","30"]
f7("ravi-blr-10,20,30")  - [10,20,30]
f8("ravi-blr-10,20,30")  -  60


Duration : 15 mins
Time     : 3.43 to 4.00

nagendra - superb
ravi     - 1
shruti   - 1,2,3,4,5,6,7,8
bhupesh  - 1,2,3,4,5,6
jagdish  - 1,2,3,4,5,6,7,8
monika   - 1,2,3,4,5,6,7,8
nilesh   - 1,2,3,4,5,6,7,8
shaikh   - 1,2
tarang   - 1,2,3,4,5,6,7,8
dipankar - all
shantanu - all





f1 = lambda x : x.split()[1]
print(f1("ravi kumar"))

f2 = lambda x : x.split()[0][0].upper() + x.split()[1][0].upper()
print(f2("ravi kumar"))



solution:-
----------
f1=lambda x : x.split()[1]
f2=lambda x : x.split()[0][0].upper() + x.split()[1][0].upper()
f3=lambda x : x.title()
f4=lambda x : sorted(x)

f5=lambda x : x.split("-")[-1]
f6=lambda x : x.split("-")[-1].split(",")
f7=lambda x : [int(e) for e in x.split("-")[-1].split(",")]
f8=lambda x : sum(int(e) for e in x.split("-")[-1].split(","))
or
f8=lambda x : sum(map(int,x.split("-")[-1].split(",")))



Applications:-
===============
>> design a special function - "callback functions"
>> custom sort
>> functional programming
>> concurrency & parallelism
>> GUI Designing - Event Driven program



Custom Sort:-
=============

plst = [
        "hdd-blr-50",
        "mon-chn-45",
        "cpu-mum-80",
        "prn-hyd-65",
        "usb-blr-75",
        "keb-chn-86"
       ]

# sorted by first field/column
plst.sort()
print("\n".join(plst))  # display every elem line by line




what-if if we need to sort on "qty" field - numeric sort ?
----------------------------------------------------------
1) we need to write a function or a lambda expression
2) which should return the VALUE - i.e Qty
3) lambda fns should return the FIELD to be sorted-on
4) list.sort(key = lambda fn)


Custom sort:-
=============
plst = [
        "hdd-blr-50",
        "mon-chn-45",
        "cpu-mum-80",
        "prn-hyd-65",
        "usb-blr-75",
        "keb-chn-86"
       ]


# lambda returns the last field of the data
# x = "hdd-blr-50"

fn1 = lambda x : x.split("-")[0]   #  returns product name
fn2 = lambda x : x.split("-")[1]   #  returns location
fn3 = lambda x : int(x.split("-")[2]) # returns qty

# sort them by last field - specify the lambda as a KEY
plst.sort(key = fn3)

# display every elem line by line
print("\n".join(plst))

Note:
 same program can you sort them based on the city ?


Custom sort:-
=============
plst = [
        "hdd-blr-50",
        "mon-chn-45",
        "cpu-mum-80",
        "prn-hyd-65",
        "usb-blr-75",
        "keb-chn-86"
       ]



plst.sort(key = lambda x : int(x.split("-")[2]))

print("\n".join(plst))


Do it later:-
=============
studlist = [
            "arun-10,20,30",
            "yash-40,60,50",
            "guru-43,65,34",
            "manu-54,34,65"
           ]
#Sort them based on there total marks

studlist.sort(key=?)
print("\n".join(studlist))

hint : "f8"


Key take away learning :-
==========================
>> define a empty list
>> list operations - append/extend/pop/remove/sort/reverse
>> collect the data
>> filter the data
>> shallow copy & deep copy
>> inplace sort & outplace sort
>> lambda expressions
>> custom sort with lambda


==================================================================
set-class:-  ( Un-ordered Sequence  - cannot be indexed/sliced )
===========
>> mutable collection
>> duplicates are automatically over-written
>> cannot be indexed or sliced
>> set members can only be Im-Mutable data structure
>> perform algebric set operations - union/intersection/diff

1) Define a empty set   :  a=set()
2) define a set         :  a={10,20,30}
                           b={10,40,50}
3) add elem             :  a.add(10)
4) delete elem          :  a.remove(10)
5) union                :  res = a.union(b)     / res=a|b
6) intersection         :  res=a.intersection(b)/ res=a&b
7) difference           :  res=a-b / res=b-a
8) symm-diff            :  res=a^b


Demo1:-
======
a = {10,20,30}
b = {30,40,50}

print("union = ",a|b)
print("Inter = ",a&b)
print("Diff  = ",a-b)
print("Diff  = ",b-a)
print("Symm Diff = ",a^b)


Demo2:-
=======
a = {10,20,30,10,10,10,20}

# all the duplicate values are ovewritten
print(a) # {10,20,30}


Demo3:-
=======
a = { 10, "blr", (20,30), [40,50] }

print(a) # ?


