def sort_arrary(array):
    for i in range(0,len(array)):
        for j in range(i+1, len(array)):
            if array[i] > array[j]:
                tmp=odd[i]
                array[i]=array[j]
                array[j]=tmp 
main():
    input_array = [1,6,9,3,2,14,10]
    output_array = [1,3,9,2,6,10,14]
    even=[]

    for i in range(0,len(input_array)):
        if input_array[i] % 2 != 1:
            even.append(input_array[i])
            input_array.pop(input_array[i])
            
    sort_array(even)
    sort_array(input_array)
    final = even.join(odd)
    print("Sorted Array = ", final)
    
TDG:
    [1,6,9,3,2,14,10]
    [0,6,9,3,2,14,10,9999,-1,8]
    [0,'a',9,3,2,14,10,9999,-1,8]
    [0,'a',9,3,2.9,14,10,9999,-1,8]
    [0,'a',9,3,2.9,14,10100,9999,-1,8]
    [0,'a',9,3,2.9,14,"x+10100i",9999,-1,8]
    [0,'a',9,3,2.9,14,"x+10100i",zzz,-1,8]
    [0,'a',9,3,2.9,14,"x+10100i",zzz,-1,8]
    (0,'a',9,3,2.9,14,"x+10100i",zzz,-1,8)
    [0,'a',9,3,2.9999,-1.40000,"x+10100i",zzz,-1,8]
    ['a','b','c','d']
    ['hello world','big data','c','d']
    [0,'a',&,3,2.9,#,"$",zzz,-1,8]#Alphanumeric
    [1,3,9,2,6,10,14]#sorted array
    [1,3,9,2,6,10,14,67,45,6,12,1,1,3,6]#duplicate
    [1,3,9,2,6,10,14,67,45,6,12,1,1,3,6]#long
    
    
Problem Solving:
   array = [ "a","b","a","b","x","x","x"] => abxxxba
                                        abxyba 
                                        

   
   [1,3,4,5]
   1.   depends on number of elements and how many occrences 
   2. if more than 1 unique (1 occr) elemtn is present then palindrome is not possible 
   element must be present even number
   total uniq chars = odd
   
   
  
   
 Test Planning:
     1. Basic Connectivty - client tab to wifi AP, Authentication - Functional testing
     2. Performance testing
     3. Security Testing - WPA, WPA2 etc., 
     4. Load testing
     5. Stress testing
     6. Sanity/Smoke testing
     7. Regression testing
     8. Feature testing - WPS, Bandwidth allocation, connecting to a mobile hotspot, 11ac, Wi-Fi6/11ax etc.,
     9. UI testing
   